{
  "tableName": "payment_transactions",
  "tableType": "REALTIME",
  "segmentsConfig": {
    "timeColumnName": "eventTimestamp",
    "timeType": "MILLISECONDS",
    "retentionTimeUnit": "DAYS",
    "retentionTimeValue": "365",
    "segmentPushType": "APPEND",
    "segmentAssignmentStrategy": "BalanceNumSegmentAssignmentStrategy",
    "replication": "2"
  },
  "tenants": {
    "broker": "DefaultTenant",
    "server": "DefaultTenant"
  },
  "tableIndexConfig": {
    "loadMode": "MMAP",
    "invertedIndexColumns": [
      "merchantId",
      "paymentStatus", 
      "currency",
      "eventType",
      "paymentMethod",
      "processingRegion",
      "businessDate"
    ],
    "rangeIndexColumns": [
      "eventTimestamp",
      "amountCents",
      "processingDurationMs"
    ],
    "bloomFilterColumns": [
      "paymentId",
      "checkoutId",
      "idempotencyKey"
    ],
    "noDictionaryColumns": [
      "eventSource",
      "eventSubject",
      "buyerName",
      "cardInfoHash"
    ],
    "sortedColumn": [
      "eventTimestamp"
    ],
    "autoGeneratedInvertedIndex": false
  },
  "metadata": {
    "customConfigs": {
      "customKey": "customValue"
    }
  },
  "ingestionConfig": {
    "streamIngestionConfig": {
      "streamConfigMaps": [
        {
          "streamType": "kafka",
          "stream.kafka.consumer.type": "lowlevel",
          "stream.kafka.topic.name": "payments",
          "stream.kafka.decoder.class.name": "org.apache.pinot.plugin.stream.kafka.KafkaJSONMessageDecoder",
          "stream.kafka.consumer.factory.class.name": "org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory",
          "stream.kafka.broker.list": "localhost:9092",
          "stream.kafka.consumer.prop.auto.offset.reset": "smallest",
          "stream.kafka.consumer.prop.group.id": "pinot-payment-transactions",
          "realtime.segment.flush.threshold.rows": "5000000",
          "realtime.segment.flush.threshold.time": "6h",
          "realtime.segment.flush.threshold.segment.size": "500M"
        }
      ]
    },
    "transformConfigs": [
      {
        "columnName": "businessDate",
        "transformFunction": "dateTimeConvert(eventTimestamp, '1:MILLISECONDS:EPOCH', '1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd', '1:DAYS')"
      },
      {
        "columnName": "amountCents", 
        "transformFunction": "CASE WHEN amount IS NULL THEN 0 ELSE CAST(amount AS LONG) END"
      }
    ],
    "filterConfig": {
      "filterFunction": "eventType IN ('payment.created', 'payment.done', 'payment-order.started', 'payment-order.approved', 'payment-order.declined', 'payment-order.booked', 'refund.created')"
    }
  },
  "routing": {
    "instanceSelectorType": "strictReplicaGroup"
  },
  "query": {
    "timeoutMs": 30000
  },
  "fieldConfigList": [
    {
      "name": "paymentId",
      "encodingType": "DICTIONARY",
      "indexType": "INVERTED"
    },
    {
      "name": "amountCents",
      "encodingType": "RAW",
      "indexType": "RANGE"
    },
    {
      "name": "eventTimestamp",
      "encodingType": "RAW",
      "indexType": "RANGE"
    }
  ],
  "upsertConfig": {
    "mode": "FULL",
    "partialUpsertStrategies": {
      "processingDurationMs": "INCREMENT",
      "processingFeeCents": "OVERWRITE"
    }
  }
}